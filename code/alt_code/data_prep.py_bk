from os import listdir, makedirs, walk
from os.path import join, isdir 
import numpy as np
from keras.utils import np_utils
from skimage import io
from itertools import izip
from random import shuffle

def mirror_rotate_images(path, category, rotate=True, mirror=True):
    '''
        Creates copies of the images in the folder by rotating and mirroring
        Descends in each folder based on the catergory
        Input:  path - path to root folder (string)
                catergory - mitosis/non_mitosis (string)
                rotate - rotates image counter clockwise 90,180,270 (boolean)
                mirror - mirrors image LR and UP (boolean)
        Output: None 
    '''
    path_category = join(path, category)
    for f in listdir(path_category):
        img_path = join(path_category, f)
        img = io.imread(img_path)
        f_name = f.split('.')[0]
        if rotate:
            rotate_images(f_name, img, path, category)
        if mirror:
            mirror_images(f_name, img, path, category)

def rotate_images(frame, img, path, category):
    '''
        Rotates the image 90,180,270 counter clockwise and saves each version in the folder (non_)mitosis_mr
        Input:  path - path to root folder (string)
                catergory - mitosis/non_mitosis (string)
                frame - name of the frame/image (string)
                img - array of the frame/image (numpy array)
        Output: None 
    '''
    path =  join(path, category+'_mr')
    if not isdir(path):
        makedirs(path)
    for i in range(1,4):
        save_path = join(path, frame+ '_rot' + str(90*i) + '.tiff')
        io.imsave(save_path, np.rot90(img, i))  

def mirror_images(frame, img, path, category):
    '''
        Mirrors the image LR and UP and saves each version in the folder (non)_mitosis_mr
        Input:  path - path to root folder (string)
                catergory - mitosis/non_mitosis (string)
                frame - name of the frame/image (string)
                img - array of the frame/image (numpy array)
        Output: None 
    '''
    path =  join(path, category+'_mr') 
    if not isdir(path):
        makedirs(path)
    save_path = join(path, frame+ '_mirrLR.tiff')
    io.imsave(save_path, np.fliplr(img)) 

    save_path = join(path, frame+ '_mirrUD.tiff')
    io.imsave(save_path, np.flipud(img)) 

def sampling_data(data_path, sample_size=-1):
    '''
        Randomly samples images from a given folder 
        Input:  path - path to image folder (string)
                sample_size - no.of images to be sampled (int)
        Output: Array of sampled image names
    '''
    path, dirs, files = walk(data_path).next()
    if sample_size < 0:
        sample_size = len(files)
    frame_sample = np.random.choice(files, sample_size, False)
    frame_path = [join(path, f) for f in frame_sample]
    return frame_path 

def get_label(frame_name):
    if "background" in frame_name:
        label = 0
    elif "non" in frame_name:
        label = 1
    else:
        label = 2
    return label

def create_image_list(path, sample_size=[-1,-1,-1], use_mr=True):
    image_list = []
    categories = ['mitosis', 'non_mitosis', 'background']
    if use_mr:
        categories = categories + ['mitosis_mr', 'non_mitosis_mr']
        sample_size = sample_size + sample_size[0:2]
    
    for category, size in izip(categories, sample_size):
        image_list = image_list + sampling_data(join(path, category), size) 
    
    shuffle(image_list)
    return image_list
#    with open('/data/ScannerA/image_list_train.txt', 'w+') as f:
#        for line in izip(image_list[0:-10000]):
#            f.write(line[0]+'\n')
#    
#    with open('/data/ScannerA/image_list_test.txt', 'w+') as f:
#        for line in izip(image_list[-10000:]):
#            f.write(line[0]+'\n')

def process_line(image_list):
    X, y = [], []
    for line in izip(image_list):
        img = io.imread(line[0].strip())
        X.append(img)
        y.append(get_label(line))

    X = np.array(X)
    X = X.astype('float32')
    X /= 255
    
    y = np.array(y)
    y = np_utils.to_categorical(y, 3)
    return X, y

def generate_test_input(image_list):
    return process_line(image_list)

def generate_train_input(image_list, batch_size):
    for i in xrange(0, len(image_list), batch_size):
        X, y = process_line(image_list[i:i+batch_size])
        yield X, y
